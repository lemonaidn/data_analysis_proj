moe_level = 99
)
knitr::opts_chunk$set(echo = TRUE)
vars <- paste0("B01001_0", c(20:25, 44:49))
vars
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
salt_lake
example_tract <- salt_lake %>%
filter(GEOID == "49035100100")
example_tract %>%
select(-NAME)
moe_prop(25, 100, 5, 3)
salt_lake_grouped <- salt_lake %>%
mutate(sex = case_when(
str_sub(variable, start = -2) < "26" ~ "Male",
TRUE ~ "Female"
)) %>%
group_by(GEOID, sex) %>%
summarize(sum_est = sum(estimate),
sum_moe = moe_sum(moe, estimate))
salt_lake_grouped
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
ga_wide <- get_acs(
geography = "county",
state = "Georgia",
variables = c(medinc = "B19013_001",
medage = "B01002_001"),
output = "wide",
year = 2020
)
ga_wide
library(tidyverse)
options(scipen = 999)
ggplot(ga_wide, aes(x = medincE)) +
geom_histogram()
ggplot(ga_wide, aes(x = medincE)) +
geom_histogram(bins = 15)
ggplot(ga_wide, aes(y = medincE)) +
geom_boxplot()
ggplot(ga_wide, aes(x = medageE, y = medincE)) +
geom_point()
ggplot(ga_wide, aes(x = medageE, y = medincE)) +
geom_point() +
geom_smooth(method = "lm")
library(tidyverse)
metros <-  get_acs(
geography = "cbsa",
variables = "DP03_0021P",
summary_var = "B01003_001",
survey = "acs1",
year = 2019
) %>%
slice_max(summary_est, n = 20)
metros
ggplot(metros, aes(x = NAME, y = estimate)) +
geom_col()
metros %>%
mutate(NAME = str_remove(NAME, "-.*$")) %>%
mutate(NAME = str_remove(NAME, ",.*$")) %>%
ggplot(aes(y = reorder(NAME, estimate), x = estimate)) +
geom_col()
metros %>%
mutate(NAME = str_remove(NAME, "-.*$")) %>%
mutate(NAME = str_remove(NAME, ",.*$")) %>%
ggplot(aes(y = reorder(NAME, estimate), x = estimate)) +
geom_col() +
theme_minimal() +
labs(title = "Public transit commute share",
subtitle = "2019 1-year ACS estimates",
y = "",
x = "ACS estimate",
caption = "Source: ACS Data Profile variable DP03_0021P via the tidycensus R package")
library(scales)
metros %>%
mutate(NAME = str_remove(NAME, "-.*$")) %>%
mutate(NAME = str_remove(NAME, ",.*$")) %>%
ggplot(aes(y = reorder(NAME, estimate), x = estimate)) +
geom_col(color = "navy", fill = "navy",
alpha = 0.5, width = 0.85) +
theme_minimal(base_size = 12, base_family = "Verdana") +
scale_x_continuous(labels = label_percent(scale = 1)) +
labs(title = "Public transit commute share",
subtitle = "2019 1-year ACS estimates",
y = "",
x = "ACS estimate",
caption = "Source: ACS Data Profile variable DP03_0021P via the tidycensus R package")
# width increases the spacing between bars
# base_size specifies the base font size to which plot text elements will be drawn; this defaults to 11
# base_family allows you to change the font family used on your plot (To check this information, use the system_fonts() function in the systemfonts package)
# scale_x_continuous() function is used to customize the X-axis of the plot. The scales package contains many useful formatting functions to neatly present tick labels, such as label_percent(), label_dollar(), and label_date().
ggsave("metro_transit.png")
ggsave(
filename = "metro_transit.png",
path = "~/images",
width = 8,
height = 5,
units = "in",
dpi = 300
)
maine <- get_decennial(
state = "Maine",
geography = "county",
variables = c(totalpop = "P1_001N"),
year = 2020
) %>%
arrange(desc(value))
maine
maine_income <- get_acs(
state = "Maine",
geography = "county",
variables = c(hhincome = "B19013_001"),
year = 2020
) %>%
mutate(NAME = str_remove(NAME, " County, Maine"))
maine_income
ggplot(maine_income, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_point(size = 3, color = "darkgreen") +
labs(title = "Median household income",
subtitle = "Counties in Maine",
x = "",
y = "ACS estimate") +
theme_minimal(base_size = 12.5) +
scale_x_continuous(labels = label_dollar())
maine_income %>%
arrange(desc(moe))
ggplot(maine_income, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(size = 3, color = "darkgreen") +
theme_minimal(base_size = 12.5) +
labs(title = "Median household income",
subtitle = "Counties in Maine",
x = "2016-2020 ACS estimate",
y = "") +
scale_x_continuous(labels = label_dollar())
years <- 2005:2019
names(years) <- years
deschutes_value <- map_dfr(years, ~{
get_acs(
geography = "county",
variables = "B25077_001",
state = "OR",
county = "Deschutes",
year = .x,
survey = "acs1"
)
}, .id = "year")
deschutes_value
ggplot(deschutes_value, aes(x = year, y = estimate, group = 1)) +
geom_line() +
geom_point()
ggplot(deschutes_value, aes(x = year, y = estimate, group = 1)) +
geom_ribbon(aes(ymax = estimate + moe, ymin = estimate - moe),
fill = "navy",
alpha = 0.4) +
geom_line(color = "navy") +
geom_point(color = "navy", size = 2) +
theme_minimal(base_size = 12) +
scale_y_continuous(labels = label_dollar(scale = .001, suffix = "k")) +
labs(title = "Median home value in Deschutes County, OR",
x = "Year",
y = "ACS estimate",
caption = "Shaded area represents margin of error around the ACS estimate")
utah <- get_estimates(
geography = "state",
state = "UT",
product = "characteristics",
breakdown = c("SEX", "AGEGROUP"),
breakdown_labels = TRUE,
year = 2019
)
utah
utah_filtered <- filter(utah, str_detect(AGEGROUP, "^Age"),
SEX != "Both sexes") %>%
mutate(value = ifelse(SEX == "Male", -value, value))
utah_filtered
ggplot(utah_filtered, aes(x = value, y = AGEGROUP, fill = SEX)) +
geom_col()
utah_pyramid <- ggplot(utah_filtered,
aes(x = value,
y = AGEGROUP,
fill = SEX)) +
geom_col(width = 0.95, alpha = 0.75) +
theme_minimal(base_family = "Verdana",
base_size = 12) +
scale_x_continuous(
labels = ~ number_format(scale = .001, suffix = "k")(abs(.x)),
limits = 140000 * c(-1,1)
) +
scale_y_discrete(labels = ~ str_remove_all(.x, "Age\\s|\\syears")) +
scale_fill_manual(values = c("darkred", "navy")) +
labs(x = "",
y = "2019 Census Bureau population estimate",
title = "Population structure in Utah",
fill = "",
caption = "Data source: US Census Bureau population estimates & tidycensus R package")
utah_pyramid
housing_val <- get_acs(
geography = "tract",
variables = "B25077_001",
state = "OR",
county = c(
"Multnomah",
"Clackamas",
"Washington",
"Yamhill",
"Marion",
"Columbia"
),
year = 2020
)
housing_val
housing_val2 <- separate(
housing_val,
NAME,
into = c("tract", "county", "state"),
sep = ", "
)
housing_val2
housing_val2 %>%
group_by(county) %>%
summarize(min = min(estimate, na.rm = TRUE),
mean = mean(estimate, na.rm = TRUE),
median = median(estimate, na.rm = TRUE),
max = max(estimate, na.rm = TRUE))
ggplot(housing_val2, aes(x = estimate)) +
geom_density()
ggplot(housing_val2, aes(x = estimate, fill = county)) +
geom_density(alpha = 0.3)
ggplot(housing_val2, aes(x = estimate)) +
geom_density(fill = "darkgreen", color = "darkgreen", alpha = 0.5) +
facet_wrap(~county) +
scale_x_continuous(labels = dollar_format(scale = 0.000001,
suffix = "m")) +
theme_minimal(base_size = 14) +
theme(axis.text.y = element_blank(),
axis.text.x = element_text(angle = 45)) +
labs(x = "ACS estimate",
y = "",
title = "Median home values by Census tract, 2015-2019 ACS")
library(ggridges)
install.packages("ggridges")
library(ggridges)
library(ggridges)
ggplot(housing_val2, aes(x = estimate, y = county)) +
geom_density_ridges() +
theme_ridges() +
labs(x = "Median home value: 2016-2020 ACS estimate",
y = "") +
scale_x_continuous(labels = label_dollar(scale = .000001, suffix = "m"),
breaks = c(0, 500000, 1000000)) +
theme(axis.text.x = element_text(angle = 45))
library(ggbeeswarm)
install.packages("ggbeeswarm")
library(ggbeeswarm)
library(ggbeeswarm)
ny_race_income <- get_acs(
geography = "tract",
state = "NY",
county = c("New York", "Bronx", "Queens", "Richmond", "Kings"),
variables = c(White = "B03002_003",
Black = "B03002_004",
Asian = "B03002_006",
Hispanic = "B03002_012"),
summary_var = "B19013_001",
year = 2020
) %>%
group_by(GEOID) %>%
filter(estimate == max(estimate, na.rm = TRUE)) %>%
ungroup() %>%
filter(estimate != 0)
ggplot(ny_race_income, aes(x = variable, y = summary_est, color = summary_est)) +
geom_quasirandom(alpha = 0.5) +
coord_flip() +
theme_minimal(base_size = 13) +
scale_color_viridis_c(guide = "none") +
scale_y_continuous(labels = label_dollar()) +
labs(x = "Largest group in Census tract",
y = "Median household income",
title = "Household income distribution by largest racial/ethnic group",
subtitle = "Census tracts, New York City",
caption = "Data source: 2016-2020 ACS")
View(ny_race_income)
library(geofacet)
install.packages("geofacet")
library(geofacet)
library(geofacet)
us_pyramid_data <- get_estimates(
geography = "state",
product = "characteristics",
breakdown = c("SEX", "AGEGROUP"),
breakdown_labels = TRUE,
year = 2019
) %>%
filter(str_detect(AGEGROUP, "^Age"),
SEX != "Both sexes") %>%
group_by(NAME) %>%
mutate(prop = value / sum(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(prop = ifelse(SEX == "Male", -prop, prop))
ggplot(us_pyramid_data, aes(x = prop, y = AGEGROUP, fill = SEX)) +
geom_col(width = 1) +
theme_minimal() +
scale_fill_manual(values = c("darkred", "navy")) +
facet_geo(~NAME, grid = "us_state_with_DC_PR_grid2",
label = "code") +
theme(axis.text = element_blank(),
strip.text.x = element_text(size = 8)) +
labs(x = "",
y = "",
title = "Population structure by age and sex",
fill = "",
caption = "Data source: US Census Bureau population estimates & tidycensus R package")
library(plotly)
ggplotly(utah_pyramid)
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation.
options(scipen=999)
# Load libraries.
library(tidyverse)
library(readr)
library(scales)
library(janitor)
library(ppcong)
# Read in the data for spending of DMV reps.
totals_dmv_spend <- read_csv("data/totals_dmv_spend.csv")
# glimpse of the cleaned details data set
glimpse(totals_dmv_spend)
# Let's look at the spending categories (column is called purpose) to get a general sense of where reps are using their budgets.
totals_dmv_spend_purpose <- totals_dmv_spend %>%
group_by(purpose) %>%
summarise(total_expenses = sum(amount)) %>%
arrange(desc(total_expenses))
# OFFICIAL EXPENSES OF MEMBER TOTALS sounds really vague, and it's the top number by far with a spend of $135,333,002.69. We also notice that Official Expenses of Members is one of the two options for the program column in totals_dmv_spend. That seems like a red flag.
# The other value in the program column is INTERN ALLOWANCES. We have a column in totals_dmv_spend_purpose called INTERN ALLOWANCES TOTALS: as well, which totals 1532417.41
# Are these two values in the purpose category totally redundant? Let's save these numbers, then filter the two rows out and see if they equal the sum of all other purposes that remain.
official <- 135333002.69
interns <- 1532417.41
totals_dmv_spend_purpose <- totals_dmv_spend %>%
filter(purpose != "OFFICIAL EXPENSES OF MEMBERS TOTALS:")|>
filter(purpose != "INTERN ALLOWANCES TOTALS:")|>
group_by(purpose) %>%
summarise(total_expenses = sum(amount)) %>%
arrange(desc(total_expenses))
# What's the sum of all of the remaining 9 categories? Does it equal the sum of OFFICIAL EXPENSES OF MEMBER TOTALS and INTERN ALLOWANCES?
totals_dmv_spend_purpose |>
summarise(total = sum(total_expenses))
without_official_interns <- 136865420
remainder <- (without_official_interns - official - interns)
remainder
# I am not sure why we have $0.10 left over. Upon manually checking the math for the without_official_interns figure, it was actually #136,865,420.10. So we're good!
# Let's make this same change in the totals_dmv_spend so that we are permanently excluding these redundancies when working with that dataframe.
totals_dmv_spend <- totals_dmv_spend %>%
filter(purpose != "OFFICIAL EXPENSES OF MEMBERS TOTALS:")|>
filter(purpose != "INTERN ALLOWANCES TOTALS:")
# Just double checking that now we have only the appropriate 9 options for purpose.
totals_dmv_spend %>%
group_by(purpose)|>
summarise()
# Good to go!
# What are the top individual expenses in our data?
totals_dmv_spend |>
group_by(last_name, first_name, purpose, amount)|>
arrange(desc(amount))
## Why is group_by not working here?
# We already know from our category overview that personnel compensation makes up the lion's share of spending by congress. The top expense is from Elaine G. Luria, a Democrat from Virginia, in 2022. Someone in her office made $573,977.80. HOLY SMOKES. That's a pretty penny and might be a story all by itself. Donald McEachin, another Democrat from VA, also paid a staff member more than half a million dollars last year. Shame on them! I'd guess this would be for Chief of Staff positions, but that needs to be verified.
View(totals_dmv_spend)
category_by_year <- totals_dmv_spend |>
group_by(year, category) |>
summarize(total_spend = sum(amount))
category_by_year
barchart <- category_by_year |>
ggplot() +
geom_bar(aes(x=category, y=amount))
View(barchart)
barchart
category_by_year |>
ggplot() +
geom_bar(aes(x=category, y=total_spend))
category_by_year |>
ggplot() +
geom_bar(aes(x=category, weight=total_spend))
category_by_year |>
ggplot() +
geom_bar(aes(x=category, weight=total_spend))+
coord_flip()
category_by_year <- totals_dmv_spend |>
group_by(year, category) |>
summarize(total_spend = sum(amount)) |>
drop.na()
category_by_year <- totals_dmv_spend |>
group_by(year, category) |>
summarize(total_spend = sum(amount)) |>
drop_na()
category_by_year
category_by_year |>
ggplot() +
geom_bar(aes(x=category, weight=total_spend))+
coord_flip()
category_by_year |>
ggplot() +
geom_bar(aes(x=category, weight=total_spend))+
coord_flip()+
facet_wrap(~year)
category_by_year |>
ggplot() +
geom_bar(aes(x=year, weight=total_spend))+
coord_flip()+
facet_wrap(~category)
View(category_by_year)
category_by_year |>
ggplot() +
geom_bar(aes(x=year, weight=total_spend))+
coord_flip()+
facet_wrap(~category) +
labs(x="Amount Spent")
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation.
options(scipen=999)
# Load libraries.
library(tidyverse)
library(readr)
library(scales)
library(janitor)
# Read in the data for spending of DMV reps.
totals_dmv_spend <- read_csv("data/totals_dmv_spend.csv")
View(totals_dmv_spend)
# Put code to here
interns <- totals_dmv_spend |>
filter(category == "PERSONNEL COMPENSATION")
View(interns)
interns <- totals_dmv_spend |>
filter(category == "PERSONNEL COMPENSATION") |>
group_by(program, year)
View(interns)
# Put code to here
staff_pay <- totals_dmv_spend |>
filter(category == "PERSONNEL COMPENSATION") |>
group_by(program, year) |>
summarize(average_pay_per_year = sum(amount)/n())
View(staff_pay)
interns |>
filter(year == 2019) |>
filter(program == "INTERN ALLOWANCES")
interns |>
filter(year == 2019) |>
group_by(program) |>
summarise(sum = sum(amount))
interns |>
filter(year == 2018)
standard_staff_pay <- staff_pay |>
filter(program != "INTERN ALLOWANCES")
View(standard_staff_pay)
setwd("~/Documents/data_analysis_proj")
national_wages <- read_csv("data/national_average_wage_index.csv")
View(national_wages)
national_wages <- read_csv("data/national_average_wage_index.csv") |> clean_names()
staff_plus_national <- national_wages |> left_join(standard_staff_pay, join_by(year))
View(staff_plus_national)
staff_plus_national <- standard_staff_pay |> left_join(national_wages, join_by(year))
View(staff_plus_national)
# Put code to here
staff_pay <- totals_dmv_spend |>
filter(category == "PERSONNEL COMPENSATION") |>
group_by(program, year) |>
summarize(congress_average = sum(amount)/n())
standard_staff_pay <- staff_pay |>
filter(program != "INTERN ALLOWANCES")
national_wages <- read_csv("data/national_average_wage_index.csv") |> clean_names()
staff_plus_national <- standard_staff_pay |> left_join(national_wages, join_by(year))
# Display results of code below this codeblock
staff_plus_national |>
ggplot(aes(x = year)) +
geom_line(aes(y = congress_average), color= "red")+
geom_line(aes(y = index), color = "blue") +
labs(x="Year",
y="",
title="",
caption="source: ProPublica")
staff_plus_national |>
ggplot(aes(x = year)) +
geom_line(aes(y = congress_average), color= "red")+
geom_line(aes(y = index), color = "blue") +
labs(x="Year",
y="",
title="",
caption="source: ProPublica") +
theme_minimal()
staff_plus_national |>
ggplot(aes(x = year)) +
geom_line(aes(y = congress_average), color= "red")+
geom_line(aes(y = index), color = "blue") +
labs(x="Year",
y="Amount Paid",
title="",
caption="source: ProPublica") +
theme_minimal()
View(staff_pay)
View(totals_dmv_spend)
